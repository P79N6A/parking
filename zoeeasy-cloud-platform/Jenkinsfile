pipeline {
    agent any
    environment {
        EMAIL_RECIPIENTS = 'cacotopia@126.com'
    }
    parameters { string(name: 'DEPLOY_ENV', defaultValue: 'dev', description: '部署环境 -dev -test -stage -prod') }
    stages {
        stage('Preparation') {
            steps {
                script {
                    // for display purposes
                    // Get some code from a GitHub repository
//                   echo 'Pulling...' + env.BRANCH_NAME
                    checkout scm
                    // Get the Maven tool.
                    // NOTE:
                    // This 'M3' Maven tool must be configured in the global configuration.
                    def mvnHome = tool 'maven-3.5.2'
                    echo mvnHome
                }
            }
        }
        stage('Build') {
            steps {
                script{
                    def mvnHome = tool 'maven-3.5.2'
                    if (isUnix()) {
                        sh "'${mvnHome}/bin/mvn' -Dmaven.test.skip=true clean compile install package -P${params.DEPLOY_ENV}"
                    } else {
                        bat(/"${mvnHome}\bin\mvn" -Dmaven.test.skip=true clean compile install package -P${params.DEPLOY_ENV}/)
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                expression {
                    // 判断是否发生测试失败
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script{
                    def workspace = pwd()
                    sh  "echo current workspace ${workspace}"
                    sh "'/deploy/scripts/cloud-platform/deploy.sh' ${workspace} deploy ${params.DEPLOY_ENV}"
                }
            }
        }
    }
}

def developmentArtifactVersion = ''
def releasedVersion = ''
// get change log to be send over the mail
@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }

    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

def sendEmail(status) {
    mail(
            to: "$EMAIL_RECIPIENTS",
            subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
            body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
}

def getDevVersion() {
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber = env.BUILD_NUMBER;
    } else {
        versionNumber = gitCommit.take(8);
    }
    print 'build  versions...'
    print versionNumber
    return versionNumber
}

def getReleaseVersion() {
    def pom = readMavenPom file: 'pom.xml'
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber = env.BUILD_NUMBER;
    } else {
        versionNumber = gitCommit.take(8);
    }
    return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
}

// if you want parallel execution , check below :
/* stage('Quality Gate(Integration Tests and Sonar Scan)') {
           // Run the maven build
           steps {
               parallel(
                       IntegrationTest: {
                           script {
                               def mvnHome = tool 'Maven 3.3.9'
                               if (isUnix()) {
                                   sh "'${mvnHome}/bin/mvn'  verify -Dunit-tests.skip=true"
                               } else {
                                   bat(/"${mvnHome}\bin\mvn" verify -Dunit-tests.skip=true/)
                               }
                           }
                       },
                       SonarCheck: {
                           script {
                               def mvnHome = tool 'Maven 3.3.9'
                               withSonarQubeEnv {
                                   // sh "'${mvnHome}/bin/mvn'  verify sonar:sonar -Dsonar.host.url=http://bicsjava.bc/sonar/ -Dmaven.test.failure.ignore=true"
                                   sh "'${mvnHome}/bin/mvn'  verify sonar:sonar -Dmaven.test.failure.ignore=true"
                               }
                           }
                       },
                       failFast: true)
           }
       }*/